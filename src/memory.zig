const std = @import("std");

pub const Memory = struct {
    memory: [4096]u8,

    pub fn init() Memory {
        var mem = Memory{ .memory = [_]u8{0} ** 4096 };

        //load fontset at 0x05 0x09F
        var fontset = [_]u8{
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80, // F
        };
        mem.write_sprite(0x050, &fontset);
        return mem;
    }

    pub fn read_addr(self: *Memory, address: u12) u8 {
        return self.memory[address];
    }

    pub fn write_addr(self: *Memory, address: u12, value: u8) void {
        self.memory[address] = value;
    }

    pub fn write_sprite(self: *Memory, address: u12, sprite: []u8) void {
        for (sprite, 0..) |byte, i| {
            self.memory[address + i] = byte;
        }
    }

    pub fn load_rom(self: *Memory, rom: []u8) void {
        for (rom, 0..) |byte, i| {
            self.memory[0x200 + i] = byte;
        }
    }
};
